from quixote.directory import Directory
from quixote import get_request
from quixote.errors import TraversalError

class RootDirectory(Directory):

	_q_exports = ["","process_input","apple_scab_grf","fire_blight_grf"]
	
#	put up input page for following
	def _q_index (self):						#default
		from newaGraph_io import apple_disease_input
		return apple_disease_input()
	def apple_scab_grf (self, path=None) :
		if not path or path == ['']:
			from newaGraph import process_input
			request = get_request()
			return process_input(request,path)
		else:
			from newaGraph import process_input
			path = ['apple_scab_grf'] + path
			return process_input(None,path)
	def fire_blight_grf (self, path=None) :
		if not path or path == ['']:
			from newaGraph import process_input
			request = get_request()
			return process_input(request,path)
		else:
			from newaGraph import process_input
			path = ['fire_blight_grf'] + path
			return process_input(None,path)

#	received request form to be processed
	def process_input (self, path=None) :
		from newaGraph import process_input
		request = get_request()
		return process_input(request,path)

#	process information provided in url
	def _q_lookup(self, component, path=None):
		req = get_request()
		if component.find('?') > 0 :
			component,query = component.split('?',1)
		if component == 'process_help':
			return process_help(req,None)
		elif component == 'process_input':
			return process_input(req,None)
		else :
			if path: 
				path = [component] + path
			else:
				path = [component]
			return process_input(None,path)

	def _q_translate(self, component) :
		if component.find('?') > 0 :
			component,query = component.split('?',1)
		return super(RootDirectory, self)._q_translate(component)

	def _q_traverse(self, path):
		assert len(path) > 0
		component = path[0]
		if component == 'program':
			del path[0]
			assert len(path) > 0
			component = path[0]
		path = path[1:]
		name = self._q_translate(component)
		if name is not None:
			obj = getattr(self, name)
			if not hasattr(obj,'_q_exports'):
				if path: return obj(path)
				else:    return obj()
			else:
				return obj._q_traverse(path)
		else:
			obj = self._q_lookup(component,path)
			if obj: return obj
		if obj is None:
			raise TraversalError(private_msg=('directory %r has no component '
								'%r' % (self, component)))
